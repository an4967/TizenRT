#ifndef __ARTIK05X_PINMAP_H__
#define __ARTIK05X_PINMAP_H__

#include <tinyara/iotbus_pinmap.h>

#include <tinyara/gpio.h>
#include <tinyara/board.h>
#include <chip/s5jt200_gpio.h>
#include <chip/s5jt200_adc.h>
#include <chip/s5jt200_pinconfig.h>

typedef struct {
	const uint8_t pad;	// Pin identify number (0 ~ 255)
	const uint32_t cfg;	// Pin Config Value
} RT_PIN;

typedef struct {
	RT_PIN rx;
	RT_PIN tx;
	RT_PIN cts;
	RT_PIN rts;
} RT_UART_PIN;

typedef struct {
	RT_PIN clk;
	RT_PIN cs;
	RT_PIN miso;
	RT_PIN mosi;
} RT_SPI_PIN;

typedef struct {
	RT_PIN scl;
	RT_PIN sda;
} RT_I2C_PIN;

typedef const RT_PIN RT_ADC_PIN;
typedef const RT_PIN RT_PWM_PIN;

const int TEST1 = 1;

RT_ADC_PIN rt_adc_pins[] = {
	/* ID : 0 */ { GPIO_PORTE1 | ADC_CON2_ACHSEL_CHANNEL0, 0 },
	/* ID : 1 */ { GPIO_PORTE1 | ADC_CON2_ACHSEL_CHANNEL1, 0 },
	/* ID : 2 */ { GPIO_PORTE1 | ADC_CON2_ACHSEL_CHANNEL2, 0 },
	/* ID : 3 */ { GPIO_PORTE1 | ADC_CON2_ACHSEL_CHANNEL3, 0 },
};

RT_PWM_PIN rt_pwm_pins[] = {
	/* ID : 0 */ { GPIO_PORTP2 | GPIO_PIN0, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN0) },
	/* ID : 1 */ { GPIO_PORTP2 | GPIO_PIN1, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN1) },
	/* ID : 2 */ { GPIO_PORTP2 | GPIO_PIN2, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN2) },
	/* ID : 3 */ { GPIO_PORTP2 | GPIO_PIN3, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN3) },
	/* ID : 4 */ { GPIO_PORTP2 | GPIO_PIN4, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN4) },
	/* ID : 5 */ { GPIO_PORTP2 | GPIO_PIN5, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN5) },
	/* ID : 6 */ { GPIO_PORTP2 | GPIO_PIN6, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN6) },
};

RT_SPI_PIN rt_spi_pins[] = {
	{ // SPI ID : 0 
		{ GPIO_PORTP0 | GPIO_PIN0 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN0) },
		{ GPIO_PORTP0 | GPIO_PIN1 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN1) },
		{ GPIO_PORTP0 | GPIO_PIN2 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN2) },
		{ GPIO_PORTP0 | GPIO_PIN3 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN3) },
	},
	{ // SPI ID : 1
		{ GPIO_PORTP4 | GPIO_PIN0 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTP4 | GPIO_PIN0) },
		{ GPIO_PORTP4 | GPIO_PIN1 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTP4 | GPIO_PIN1) },
		{ GPIO_PORTP4 | GPIO_PIN2 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTP4 | GPIO_PIN2) },
		{ GPIO_PORTP4 | GPIO_PIN3 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTP4 | GPIO_PIN3) },
	},
	{ // SPI ID : 2
		{ GPIO_PORTG0 | GPIO_PIN4 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN4) },
		{ GPIO_PORTG0 | GPIO_PIN5 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN5) },
		{ GPIO_PORTG0 | GPIO_PIN6 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN6) },
		{ GPIO_PORTG0 | GPIO_PIN7 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN7) },
	},
	{ // SPI ID : 3
		{ GPIO_PORTG1 | GPIO_PIN0 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG1 | GPIO_PIN0) },
		{ GPIO_PORTG1 | GPIO_PIN1 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG1 | GPIO_PIN1) },
		{ GPIO_PORTG1 | GPIO_PIN2 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG1 | GPIO_PIN2) },
		{ GPIO_PORTG1 | GPIO_PIN3 , (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG1 | GPIO_PIN3) },
	},
};

RT_I2C_PIN rt_i2c_pins[] = {
	{ // I2C ID : 0
		{ GPIO_PORTA1 | GPIO_PIN0, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA1 | GPIO_PIN0) },
		{ GPIO_PORTA1 | GPIO_PIN1, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA1 | GPIO_PIN1) },
	},
	{ // I2C ID : 1
		{ GPIO_PORTA1 | GPIO_PIN2, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA1 | GPIO_PIN2) },
		{ GPIO_PORTA1 | GPIO_PIN3, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA1 | GPIO_PIN3) },
	},
	{ // I2C ID : 2
		{ GPIO_PORTG0 | GPIO_PIN0, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN0) },
		{ GPIO_PORTG0 | GPIO_PIN1, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN1) },
	},
	{ // I2C ID : 3
		{ GPIO_PORTG0 | GPIO_PIN2, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN2) },
		{ GPIO_PORTG0 | GPIO_PIN3, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST1X | GPIO_PORTG0 | GPIO_PIN3) },
	},
};

RT_UART_PIN rt_uart_pins[] = {
	{ // UART ID : 0
		{ GPIO_PORTA2 | GPIO_PIN0, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA2 | GPIO_PIN0) },
		{ GPIO_PORTA2 | GPIO_PIN1, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA2 | GPIO_PIN1) },
		{ 0, },
		{ 0, },
	},
	{ // UART ID : 1
		{ GPIO_PORTP0 | GPIO_PIN4, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN4) },
		{ GPIO_PORTP0 | GPIO_PIN5, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN5) },
		{ 0, },
		{ 0, },
	},
	{ // UART ID : 2
		{ GPIO_PORTP0 | GPIO_PIN6, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN6) },
		{ GPIO_PORTP0 | GPIO_PIN7, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN7) },
		{ GPIO_PORTP0 | GPIO_PIN4, (GPIO_ALT2 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN4) },
		{ GPIO_PORTP0 | GPIO_PIN5, (GPIO_ALT2 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP0 | GPIO_PIN5) },
	},
	{ // UART ID : 3
		{ GPIO_PORTP1 | GPIO_PIN6, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP1 | GPIO_PIN6) },
		{ GPIO_PORTP1 | GPIO_PIN7, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP1 | GPIO_PIN7) },
		{ GPIO_PORTP2 | GPIO_PIN0, (GPIO_ALT3 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN0) },
		{ GPIO_PORTP2 | GPIO_PIN1, (GPIO_ALT3 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTP2 | GPIO_PIN1) },
	},
	{ // UART ID : 4
		{ GPIO_PORTA3 | GPIO_PIN0, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA3 | GPIO_PIN6) },
		{ GPIO_PORTA3 | GPIO_PIN1, (GPIO_ALT1 | GPIO_FLOAT | GPIO_FAST3X | GPIO_PORTA3 | GPIO_PIN7) },
		{ 0, },
		{ 0, },
	},
};

/*
 * Board specific definition
 */

/* GPIO Config */
#define PIN_MACRO_GPIO_PAD(Port, Pin)	(Port | Pin)
#define PIN_MACRO_GPIO_PORT(pad)		((pad & GPIO_PORT_MASK) >> GPIO_PORT_SHIFT)
#define PIN_MACRO_GPIO_PIN(pad)			((pad & GPIO_PIN_MASK) >> GPIO_PIN_SHIFT)

#define PORT_GPIO_OUTPUT_HIGH		(GPIO_OUTPUT | GPIO_PULLDOWN | GPIO_VALUE_ONE)
#define PORT_GPIO_OUTPUT_LOW		(GPIO_OUTPUT | GPIO_PULLDOWN | GPIO_VALUE_ZERO)
#define PORT_GPIO_INPUT				(GPIO_INPUT | GPIO_PULLDOWN)
#define PORT_PIN_ALT				(0)

/* ADC Config */
#define PIN_MACRO_ADC_PAD(ID)		rt_adc_pins[ID].pad

/* PWM Config */
#define PIN_MACRO_PWM_PAD(ID)		rt_pwm_pins[ID].pad

/* UART Config */
#define PIN_MACRO_UART_PAD(ID)		rt_uart_pins[ID][0].pad

/* SPI Config */
#define PIN_MACRO_UART_PAD(ID)		rt_spi_pins[ID][0].pad

/* I2C Config */
#define PIN_MACRO_I2C_PAD(ID)		rt_i2c_pins[ID][0].pad

/*
 * Product specific definition
 */
#define PORT_GPIO_TEST1		PIN_MACRO_GPIO_PAD(GPIO_PORTG0, GPIO_PIN0)
#define PORT_GPIO_TEST2		PIN_MACRO_GPIO_PAD(GPIO_PORTG1, GPIO_PIN7)
#define PORT_GPIO_TEST3		PIN_MACRO_GPIO_PAD(GPIO_PORTG2, GPIO_PIN0)

#define PORT_ADC_TEST1		PIN_MACRO_ADC_PAD(0)
#define PORT_ADC_TEST2		PIN_MACRO_ADC_PAD(2)

#define PORT_PWM_TEST1		PIN_MACRO_PWM_PAD(0)
#define PORT_PWM_TEST2		PIN_MACRO_PWM_PAD(1)

#define PORT_UART_TEST1		PIN_MACRO_UART_PAD(2)
#define PORT_UART_TEST2		PIN_MACRO_UART_PAD(3)

#define PORT_I2C_TEST1		PIN_MACRO_I2C_PAD(1)
#define PORT_I2C_TEST2		PIN_MACRO_I2C_PAD(2)

#define PORT_SPI_TEST1		PIN_MACRO_SPI_PAD(1)
#define PORT_SPI_TEST2		PIN_MACRO_SPI_PAD(2)

PORT_PROPERTY sPort_InitTable[] = {
	{ PORT_GPIO_TEST1, IOTBUS_PIN_GPIO, PORT_GPIO_OUTPUT_HIGH },
	{ PORT_GPIO_TEST2, IOTBUS_PIN_GPIO, PORT_GPIO_OUTPUT_LOW },
	{ PORT_GPIO_TEST3, IOTBUS_PIN_GPIO, PORT_GPIO_INPUT },

	{ TEST1, IOTBUS_PIN_ADC, PORT_PIN_ALT },
	{ PORT_ADC_TEST2, IOTBUS_PIN_ADC, PORT_PIN_ALT },

	{ PORT_PWM_TEST1, IOTBUS_PIN_PWM, PORT_PIN_ALT },
	{ PORT_PWM_TEST2, IOTBUS_PIN_PWM, PORT_PIN_ALT },

	{ PORT_UART_TEST1, IOTBUS_PIN_UART, PORT_PIN_ALT },
	{ PORT_UART_TEST2, IOTBUS_PIN_UART, PORT_PIN_ALT },

	{ PORT_I2C_TEST1, IOTBUS_PIN_I2C, PORT_PIN_ALT },
	{ PORT_I2C_TEST2, IOTBUS_PIN_I2C, PORT_PIN_ALT },

	{ PORT_SPI_TEST1, IOTBUS_PIN_SPI, PORT_PIN_ALT },
	{ PORT_SPI_TEST2, IOTBUS_PIN_SPI, PORT_PIN_ALT },
};

#define PORT_INIT_TABLE  (sizeof(sPort_InitTable) / sizeof(PORT_PROPERTY))

#endif // __ARTIK05X_PINMAP_H__
